[LESSON_FOLDER]../_cursos/01_PSoC4/Seccion05/L19_ADC_LEDs/
[IMG_FOLDER]img/

[TITLE_SPANISH]ADC - LEDs
[TITLE_ENGLISH]ADC - LEDs

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]En este proyecto vamos a usar el potenciómetro conectado al componente ADC para encender los leds rojo, verde y azul
[ENGLISH]On this project you will use a potentiometer connected to the ADC component to switch on the red, green and blue LEDs
[SPANISH]El valor del componente ADC variará entre 0 y 2047 (11 bits). Cuando el valor esté por debajo de 682 (un tercio del valor máximo) se encenderá el led azul. Cuando el valor esté entre 683 y 1364 (entre un tercio y 2 tercios del valor máximo) se encenderá el led verde. Y cuando el valor sea mayor que 1365 (dos tercios del valor máximo) se encenderá el led rojo
[ENGLISH]The value of the ADC component will vary from 0 to 2047 (11 bits). When the value is under 682 (a third of the max value) the blue LED will be on. When the value is between 683 and 1364 (between a third and 2 thirds of the max value) the green will be on. And when the value is greater than 1365 ( 2 thirds of the max value) the red LED will be on
[END_LIST]
[IMG]Setup.png
[IMG_SPANISH]P019_ADC_pins_es.png
[IMG_ENGLISH]P019_ADC_pins_en.png
[BLOCK_END]

[SECTION_SPANISH]Pasos
[SECTION_ENGLISH]Steps

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Copia el Workspace 18 y renómbralo como 19
[ENGLISH]Copy the Workspace 18 and rename it as 19
[END_LIST]
[IMG]01.png
[IMG]02.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Añade una interrupción
[ENGLISH]Add an interrupt
[END_LIST]
[IMG]03.png
[IMG]04.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Edita sus propiedades
[ENGLISH]Edit its properties
[END_LIST]
[IMG]05.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Renómbrala como "ISR_ADC_EOC"
[ENGLISH]Rename it as "ISR_ADC_EOC"
[END_LIST]
[IMG]06.png
[IMG]07.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Conecta la interrupción a la salida "eoc" del componente "ADC"
[ENGLISH]Connect the interrupt to the output "eoc" of the "ADC" component
[END_LIST]
[IMG]08.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Edita las propiedades de la salida digital "ADC_EOC"
[ENGLISH]Edit the properties of the digital output "ADC_EOC"
[END_LIST]
[IMG]09.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Como va a ser controlada por el programa, deshabilita la opción "HW connection"
[ENGLISH]As it is going to be controlled by the program, disable the option "HW connection"
[END_LIST]
[IMG]10.png
[IMG]11.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Cambia de sitio la interrupción y la salida en el esquemático
[ENGLISH]Rearrange the interrupt and the output in the schematic
[END_LIST]
[IMG]12.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Crea 3 nuevas salidas (para los leds) copiando la salida "ADC_EOC" tres veces
[ENGLISH]Create 3 new outputs (for the LEDs) by copying the output "ADC_EOC" three times
[END_LIST]
[IMG]13.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Y renómbralas como "LED_RED", "LED_GREEN" y "LED_BLUE"
[ENGLISH]And rename them as "LED_RED", "LED_GREEN" and "LED_BLUE"
[END_LIST]
[IMG]14.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Conecta las salidas a los pines del PSoC
[ENGLISH]Connect the outputs to the PSoC pins
[END_LIST]
[IMG]15.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Añade el siguiente código en "main.c"
[ENGLISH]Add the following code in "main.c"
[END_LIST]
[IMG]16.png

[SOURCE_CODE_EX_BEGIN]12
:code:#include <project.h>
:code:
:code:#define POT_CHAN        (0)
:key1:        --------
:es__: Define la constante POT_CHAN como 0 (es el canal ADC usado)
:en__: Defines the constant POT_CHAN as 0 (it is the ADC channed used)

:code:#define MAX_ADC_VALUE   0x7FF
:key2:        -------------
:es__: Define la constante  MAX_ADC_VALUE como 0x7FF (2047, máximo valor para 11 bits)
:en__: Defines the constant MAX_ADC_VALUE as   0x7FF (2047, max value for 11 bits)

:code:
:code:CY_ISR(ISR_ADC_EOC_Handler)
:key3:---------------------------
:es__: Define la función "ISR_ADC_EOC_Handler" como una ISR (Rutina de servicio de interrupción)
:en__: Defines the function "ISR_ADC_EOC_Handler" as an ISR (Interrupt Service Routine)

:code:{
:code:    volatile int16  i16Counts;
:code:    volatile int16  i16mVolts;
:code:    
:code:    i16Counts   =   ADC_GetResult16(POT_CHAN);
:key4:                    ---------------
:es__: Obtiene el último valor medido por el ADC
:en__: Gets the last value measured by the ADC

:code:    i16mVolts   =   ADC_CountsTo_mVolts(POT_CHAN,i16Counts);
:key5:                    -------------------
:es__: Convierte el valor a milivoltios
:en__: Converts the value to millivolts

:code:
:code:    ADC_EOC_Write( ~ ADC_EOC_Read());
:key6:    --------------------------------
:es__: Conmuta el estado de la salida "ADC_EOC" (para ser vista en el osciloscopio)
:en__: Toggles the state of the output "ADC_EOC" (to be seen on the oscilloscope)

:code:    
:code:    if (i16Counts < MAX_ADC_VALUE / 3)
:key1:    ----------------------------------
:es__: Si el valor del ADC es menor que 682 enciende el led azul
:en__: If the ADC value is less than 682 the blue LED is on

:code:    {
:code:        LED_RED_Write(1);
:code:        LED_GREEN_Write(1);
:code:        LED_BLUE_Write(0);
:code:    }
:code:    else if (i16Counts < 2 * MAX_ADC_VALUE / 3)
:key2:    -------------------------------------------
:es__: Si el valor del ADC está en el rango [683,1364] enciende el led verde
:en__: If the ADC value is in the range [683,1364] the green LED is on

:code:    {
:code:        LED_RED_Write(1);
:code:        LED_GREEN_Write(0);
:code:        LED_BLUE_Write(1);
:code:    }
:code:    else 
:key3:    ----
:es__: Si el valor del ADC es mayor de 1365 enciende el led rojo
:en__: If the ADC value is over 1365 the red LED is on

:code:    {
:code:        LED_RED_Write(0);
:code:        LED_GREEN_Write(1);
:code:        LED_BLUE_Write(1);
:code:    }
:code:    
:code:    ISR_ADC_EOC_ClearPending();
:code:}
[SOURCE_CODE_EX_END]

[IMG]17.png

[SOURCE_CODE_EX_BEGIN]49
:code:int main()
:code:{
:code:    
:code:    CyGlobalIntEnable; /* Enable global interrupts. */
:key1:    -----------------
:es__: Habilita interrupciones
:en__: Enables global interrupts

:code:
:code:    ADC_Start();
:key2:    -----------
:es__: Inicializa el componente ADC
:en__: Initializes the ADC component

:code:    ISR_ADC_EOC_StartEx(ISR_ADC_EOC_Handler);
:key3:    ----------------------------------------
:es__: Inicializa la interrupción ISR_ADC_EOC y configura la función ISR_ADC_EOC_Handler como su ISR
:en__: Initializes the ISR_ADC_EOC interrupt and configures the function ISR_ADC_EOC_Handler as its ISR

:code:    ADC_StartConvert();
:key4:    ------------------
:es__: Comienza la conversión del componente ADC de forma continua
:en__: Starts the conversions of the ADC component in a continuous way

:code:
:code:    for(;;)
:code:    {
:code:    }
:code:}
[SOURCE_CODE_EX_END]
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Además podrás ver en el osciloscopio la señal que cambia cada vez que se genera una interrupción del ADC (main.c línea 25)
[ENGLISH]Additionally you can see on the oscilloscope the signal that changes every time that the ADC EOC interrupt is generated (main.c line 25)
[END_LIST]
[IMG]TEK0000.JPG
[BLOCK_END]

[SECTION_SPANISH]Descargas
[SECTION_ENGLISH]Downloads

[BLOCK_START]
[BEGIN_LIST]
[LINK_SPANISH]downloads/WS019.zip;Descarga el proyecto aquí (PSoC Creator 4.0).
[LINK_ENGLISH]downloads/WS019.zip;Download the project here (PSoC Creator 4.0).
[END_LIST]
[BLOCK_END]


