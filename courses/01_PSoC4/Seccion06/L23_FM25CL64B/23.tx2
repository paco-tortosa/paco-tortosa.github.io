[LESSON_FOLDER]../courses/01_PSoC4/Seccion06/L23_FM25CL64B/
[IMG_FOLDER]img/

[TITLE_SPANISH]SPI (FM25CL64B)
[TITLE_ENGLISH]SPI (FM25CL64B)

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]En esta lección vamos a usar otra vez el componente SPI (Serial Peripheral Interface)
[ENGLISH]In this lesson you will use again the SPI (Serial Peripheral Interface) component
[SPANISH]Vamos a comunicar el PSoC con el integrado FM25CL64B (Cypress), que es una memoria FRAM
[ENGLISH]PSoC will communicate with a FM25CL64B (Cypress), that is a FRAM memory
[SPANISH]Sus principales características son:
[ENGLISH]Its main features are:
[END_LIST]

[TABLE_BEGIN]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Característica
[TABLE_ITEM_ENGLISH]Feature
[TABLE_ITEM_SPANISH]Valor
[TABLE_ITEM_ENGLISH]Value
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]FRAM
[TABLE_ITEM_ENGLISH]FRAM
[TABLE_ITEM_SPANISH]Ferroelectric Random Access Memory
[TABLE_ITEM_ENGLISH]Ferroelectric Random Access Memory
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Capacidad
[TABLE_ITEM_ENGLISH]Density
[TABLE_ITEM_SPANISH]8K Bytes
[TABLE_ITEM_ENGLISH]8K Bytes
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Tensión de alimentación
[TABLE_ITEM_ENGLISH]Voltage supply
[TABLE_ITEM_SPANISH]2.7V a 3.65V
[TABLE_ITEM_ENGLISH]2.7V a 3.65V
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Número máximo de lecturas/escrituras
[TABLE_ITEM_ENGLISH]Max Read/Write cycles
[TABLE_ITEM_SPANISH]100.000.000.000.000
[TABLE_ITEM_ENGLISH]100.000.000.000.000
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Retardo por escritura
[TABLE_ITEM_ENGLISH]Delay on writing
[TABLE_ITEM_SPANISH]0 s (misma velocidad que el bus SPI)
[TABLE_ITEM_ENGLISH]0 s (same speed as the SPI bus)
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Frecuencia máxima de reloj (SCLK)
[TABLE_ITEM_ENGLISH]Maximum SPI frequency (SCLK)
[TABLE_ITEM_SPANISH]20 MHz
[TABLE_ITEM_ENGLISH]20 MHz
[TABLE_ROW_END]
[TABLE_END]

[IMG]Setup.png
[IMG]P023_Pins_.png
[IMG]FRAM.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]El jumper J9 debe tener los terminales 1 y 2 conectados. Así el kit funcionará a 3V3
[ENGLISH]Change the jumper J9 so that the pins 1 and 2 are connected. So the kit will run with 3.3 volts
[END_LIST]
[IMG]P023_3V.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Esta es la configuración de SPI que vamos a usar con el esclavo FM25CL64B:
[ENGLISH]This is the SPI configuration you will use with the SPI slave FM25CL64B:
[END_LIST]

[TABLE_BEGIN]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]Señal
[TABLE_ITEM_ENGLISH]Signal
[TABLE_ITEM_SPANISH]Operación
[TABLE_ITEM_ENGLISH]Operation
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]CS (Chip Select)
[TABLE_ITEM_ENGLISH]CS (Chip Select)
[TABLE_ITEM_SPANISH]Es activa a nivel bajo
[TABLE_ITEM_ENGLISH]Is active low
[TABLE_ROW_END]
[TABLE_ROW_BEGIN]
[TABLE_ITEM_SPANISH]SCLK (Reloj)
[TABLE_ITEM_ENGLISH]SCLK (Clock)
[TABLE_ITEM_SPANISH]En reposo SCLK está a nivel bajo, y los datos se capturan en el flanco de subida
[TABLE_ITEM_ENGLISH]In idle state, SCLK is low and the data are captured on the rising edge of SCLK
[TABLE_ROW_END]
[TABLE_END]

[IMG]P023_SPI.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Hay 6 comandos SPI (pero aquí sólo usaremos 3):
[ENGLISH]There are 6 SPI commands (but here you will use 3):
[END_LIST]
[IMG]FRAM_01.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]El comando "WREN" (código 0x06) debe ser enviado antes de cualquier operación de escritura
[ENGLISH]The "WREN" command (opcode 0x06) must be sent before any write operation
[END_LIST]
[IMG]FRAM_02.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]El comando "WRITE" (código 0x02) escribe en una dirección de 13 bits un número variable de bytes
[ENGLISH]The "WRITE" command (opcode 0x02) writes to a 13-bit address location a variable number of bytes
[END_LIST]
[IMG]FRAM_04.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]El comando "READ" (código 0x03) lee de una dirección de 13 bits un número variable de bytes
[ENGLISH]The "READ" command (opcode 0x03) reads from a 13-bit address a variable number of bytes
[END_LIST]
[IMG]FRAM_05.png
[BLOCK_END]

[SECTION_SPANISH]Pasos
[SECTION_ENGLISH]Steps

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Copia el proyecto anterior (WS022) y renómbralo como WS023
[ENGLISH]Copy the previous project (WS022) and rename it as WS023
[SPANISH]Ve al esquemático y añade dos salidas digitales "Pin_HOLD" y "Pin_WP"
[ENGLISH]Go to the schematic and add 2 digital outputs "Pin_HOLD" and "Pin_WP"
[END_LIST]
[IMG]01.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Asigna las salidas a los pines del PSoC:
[ENGLISH]Assign the outputs to the PSoC pins:
[END_LIST]
[IMG]02.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Añade el siguiente código a "main.c" :
[ENGLISH]Add the following code to "main.c" :
[END_LIST]
[IMG]03.png

[SOURCE_CODE_EX_BEGIN]12
:code:#include "project.h"
:code:
:code:#define CMD_WREN        0x06
:key1:        --------
:es__: Define la constante  CMD_WREN como 0x06
:en__: Defines the constant CMD_WREN as 0x06

:code:#define CMD_READ_MEM    0x03
:key2:        ------------
:es__: Define la constante  CMD_READ_MEM como 0x03
:en__: Defines the constant CMD_READ_MEM as 0x03

:code:#define CMD_WRITE_MEM   0x02
:key3:        -------------
:es__: Define la constante  CMD_WRITE_MEM como 0x02
:en__: Defines the constant CMD_WRITE_MEM as 0x02

:code:
:code:const   uint8   au8Constants1[] =   { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11};
:key4:                -------------
:es__: Define la variable <b>au8Constants1</b> que es un array de enteros de 8 bits sin signo, con valores desde 0 a 11
:en__: Defines the variable <b>au8Constants1</b> that is an array of 8-bit unsigned integer, with values from 0 to 11

:code:const   uint8   au8Constants2[] =   {12,13,14,15,16,17,18,19,20,21,22,23};
:key5:                -------------
:es__: Define la variable <b>au8Constants2</b> que es un array de enteros de 8 bits sin signo, con valores desde 12 a 23
:en__: Defines the variable <b>au8Constants2</b> that is an array of 8-bit unsigned integer, with values from 12 to 23

:code:        uint8   au8FromMemory[sizeof(au8Constants1)];
:key6:                -------------
:es__: Define la variable <b>au8FromMemory</b> que es un array de enteros de 8 bits sin signo, donde guardaremos los datos leídos de la memoria con valores desde 12 a 23
:en__: Defines the variable <b>au8FromMemory</b> that is an array of 8-bit unsigned integer, with values from 12 to 23

[SOURCE_CODE_EX_END]

[BLOCK_END]

[BLOCK_START]
[IMG]04.png

[SOURCE_CODE_EX_BEGIN]22
:code:///////////////////////////////////////////
:code:// SpiWriteByte
:code:///////////////////////////////////////////
:code:uint8   SpiWriteByte(  uint8   _u8Data)
:key1:        ------------
:es__: Define la función <b>SpiWriteByte</b> que envía un byte por SPI
:en__: Defines the function <b>SpiWriteByte</b> that sends a byte through SPI

:code:{
:code:    SPIM_WriteByte(_u8Data);
:key2:    --------------
:es__: Escribe en el buffer de transmisión SPI el valor a enviar
:en__: Writes into the transmission SPI buffer the value to send

:code:
:code:    // Wait while Master completes transaction
:code:    while(0u == (SPIM_ReadTxStatus() & SPIM_STS_SPI_DONE));
:key3:    -----
:es__: Espera hasta que el buffer de transmisión SPI está vacío (el byte ha sido enviados)
:en__: Waits for the transmission SPI buffer to be empty (the byte has been already sent)

:code:
:code:    // Wait until the received byte is in the RX-buffer
:code:    while(SPIM_GetRxBufferSize() != 1);
:key4:    -----
:es__: Espera hasta haber recibido el byte del esclavo por la línea MISO
:en__: Waits for the incoming byte from the slave through the MISO line

:code:    
:code:    // Returns the received byte.
:code:    return SPIM_ReadByte();
:key5:           -------------
:es__: Devuelve el valor recibido del esclavo
:en__: Returns the value received from the slave

:code:}
[SOURCE_CODE_EX_END]

[BLOCK_END]

[BLOCK_START]
[IMG]05.png

[SOURCE_CODE_EX_BEGIN]39
:code:///////////////////////////////////////////
:code:// FramWriteMem
:code:///////////////////////////////////////////
:code:void FramWriteMem(  uint16  _u16Address,
:key1:     ------------
:es__: Define la función <b>FramWriteMem</b> que escribe datos en la memoria
:en__: Defines the function <b>FramWriteMem</b> that writes data into the memory

:key2:                            -----------
:es__: Dirección de la memoria FRAM donde escribir los datos
:en__: FRAM address where to write the data

:code:                    uint8*  _pu8Data,
:key3:                            --------
:es__: Puntero a un array que contiene los datos a escribir
:en__: Pointer to an array of bytes that stores the data to write

:code:                    uint16  _u16DataCount)
:key4:                            -------------
:es__: Número de bytes a escribir
:en__: Number of bytes to write

:code:{
:code:    uint16  u16Idx;
:key5:            ------
:es__: Define la variable <b>u16Idx</b> que será usada en el bucle <b>for</b> (línea 59)
:en__: Defines the variable <b>u16Idx</b> that will be used in the <b>for</b> loop (line 59)

:code:    uint8   u8AddressByteHigh   =   _u16Address >> 8;
:key6:            -----------------
:es__: Define la variable <b>u8AddressByteHigh</b> que es el byte alto de la dirección a escribir
:en__: Defines the variable <b>u8AddressByteHigh</b> that is the high byte of the address to write

:code:    uint8   u8AddressByteLow    =   _u16Address & 0xFF;
:key1:            ----------------
:es__: Define la variable <b>u8AddressByteLow</b> que es el byte bajo de la dirección a escribir
:en__: Defines the variable <b>u8AddressByteLow</b> that is the low byte of the address to write

:code:    
:code:    Pin_CS_Write(0);
:key2:    ---------------
:es__: Señal CS a nivel bajo para indicar comienzo de transmisión SPI
:en__: CS Signal to low level to indicate begin of SPI transmission

:code:        SpiWriteByte(CMD_WREN);
:key3:        ----------------------
:es__: Envío del comando <b>WREN</b> (necesario antes de cualquier escritura)
:en__: Sending of the <b>WREN</b> command (needed before any write)

:code:    Pin_CS_Write(1);
:key4:    ---------------
:es__: Señal CS a nivel alto para indicar fin de transmisión SPI
:en__: CS Signal to high level to indicate end of SPI transmission
:code:    
:code:    Pin_CS_Write(0);
:key5:    ---------------
:es__: Señal CS a nivel bajo para indicar comienzo de transmisión SPI
:en__: CS Signal to low level to indicate begin of SPI transmission

:code:        SpiWriteByte(CMD_WRITE_MEM);
:key6:        ---------------------------
:es__: Envío del comando de escritura <b>CMD_WRITE_MEM</b>
:en__: Sending of the write command <b>CMD_WRITE_MEM</b>

:code:        SpiWriteByte(u8AddressByteHigh);
:key1:        -------------------------------
:es__: Envío del byte alto de la dirección a escribir
:en__: Sending of the high byte of the address to write

:code:        SpiWriteByte(u8AddressByteLow);
:key2:        ------------------------------
:es__: Envío del byte bajo de la dirección a escribir
:en__: Sending of the low byte of the address to write

:code:        
:code:        for(u16Idx  =   0;
:key3:        ---
:es__: Envío de los datos a escribir (el bucle <b>for</b> recorre todo el array y envía los bytes que lo forman)
:en__: Sending of data to write (the <b>for</b> loop iterates through all the array and sends the content)

:code:            u16Idx  <   _u16DataCount;
:code:            u16Idx++)
:code:        {
:code:            SpiWriteByte(_pu8Data[u16Idx]);
:code:        }
:code:    Pin_CS_Write(1);
:key4:    ---------------
:es__: Señal CS a nivel alto para indicar fin de transmisión SPI
:en__: CS Signal to high level to indicate end of SPI transmission

:code:}
[SOURCE_CODE_EX_END]

[BLOCK_END]

[BLOCK_START]
[IMG]06.png

[SOURCE_CODE_EX_BEGIN]68
:code:///////////////////////////////////////////
:code:// FramReadMem
:code:///////////////////////////////////////////
:code:void FramReadMem(   uint16  _u16Address,
:key1:     -----------
:es__: Define la función <b>FramReadMem</b> que lee datos de la memoria
:en__: Defines the function <b>FramReadMem</b> that reads data from the memory

:key2:                            -----------
:es__: Dirección de la memoria FRAM de donde leer los datos
:en__: FRAM address where to read the data

:code:                    uint8*  _pu8Data,
:key3:                            --------
:es__: Puntero al array donde guardar los datos leidos
:en__: Pointer to an array where to store the read data

:code:                    uint16  _u16DataCount)
:key4:                            -------------
:es__: Número de bytes a leer
:en__: Number of bytes to read

:code:{
:code:    uint16  u16Idx;
:code:    uint8   u8AddressByteHigh   =   _u16Address >> 8;
:code:    uint8   u8AddressByteLow    =   _u16Address & 0xFF;
:code:    
:code:    Pin_CS_Write(0);
:code:        SpiWriteByte(CMD_READ_MEM);
:key5:        --------------------------
:es__: Envío del comando <b>READ</b>
:en__: Sending of the <b>READ</b> command

:code:        SpiWriteByte(u8AddressByteHigh);
:code:        SpiWriteByte(u8AddressByteLow );
:code:        
:code:        for(u16Idx  =   0;
:key6:        ---
:es__: Lectura de los datos (el bucle for recorre todo el array y envía siempre 0, para poder leer del esclavo).<br>La función <b>SpiWriteByte</b> devuelve el dato leído y es almacenado en el array
:en__: Read of the data (the for loop iterates through all the array and sends always 0 to be able to read from the slave).<br>The function <b>SpiWriteByte</b> returns the read data and it is stored in the array

:code:            u16Idx  <   _u16DataCount;
:code:            u16Idx++)
:code:        {
:code:            _pu8Data[u16Idx]    =   SpiWriteByte(0);
:code:        }
:code:    Pin_CS_Write(1);
:code:}
[SOURCE_CODE_EX_END]

[BLOCK_END]

[BLOCK_START]
[IMG]07.png

[SOURCE_CODE_EX_BEGIN]93
:code:///////////////////////////////////////////
:code:// main
:code:///////////////////////////////////////////
:code:int main(void)
:code:{
:code:    // Enable global interrupts.
:code:    CyGlobalIntEnable; 
:code:
:code:    SPIM_Start();
:key1:    ------------
:es__: Inicializa el componente SPIM
:en__: Initializes the SPI component

:code:
:code:    Pin_CS_Write(1);
:key2:    ---------------
:es__: Pone a nivel alto la señal CS
:en__: Set the CS signal to high level

:code:    Pin_WP_Write(1);
:key3:    ---------------
:es__: Pone a nivel alto la señal WP (habilita las escrituras en la memoria)
:en__: Set the WP signal to high level (enables the writes into the memory)

:code:    Pin_HOLD_Write(1);
:key4:    -----------------
:es__: Pone a nivel alto la señal HOLD (no se usa la función HOLD de la memoria)
:en__: Set the HOLD signal to high level (the HOLD feature of the memory is not used)

:code:
:code:    FramWriteMem(   0x0000, (uint8*)au8Constants1,sizeof(au8Constants1));
:key5:    ------------
:es__: Escribe en la dirección 0x00 los valores : 0,1,2,3,4,5,6,7,8,10,11
:en__: Writes in the address 0x00 the values : 0,1,2,3,4,5,6,7,8,10,11

:code:    FramReadMem (   0x0000,         au8FromMemory,sizeof(au8FromMemory));
:key6:    -----------
:es__: Lee 12 bytes de la dirección 0x00 y los almacena en el array <b>au8FromMemory</b>. <br>(sizeof() devuelve el tamaño en bytes de una variable).<br>Coloca aquí un breakpoint para ver el contenido del array <b>au8FromMemory</b>, debe ser 0,1,2,3,4,5,6,7,8,10,11
:en__: Read 12 bytes from the address 0x00 and it stores into the array <b>au8FromMemory</b>. <br>(sizeof() returns the size in bytes of a variable).<br>Set here a breakpoint to see the content of the array <b>au8FromMemory</b>, it must be 0,1,2,3,4,5,6,7,8,10,11

:code:
:code:    FramWriteMem(   0x0000, (uint8*)au8Constants2,sizeof(au8Constants2));
:key1:    ------------
:es__: Escribe en la dirección 0x00 los valores : 12,13,14,15,16,17,18,19,20,21,22,23
:en__: Writes in the address 0x00 the values : 12,13,14,15,16,17,18,19,20,21,22,23

:code:    FramReadMem (   0x0000,         au8FromMemory,sizeof(au8FromMemory));
:key2:    -----------
:es__: Lee 12 bytes de la dirección 0x00 y los almacena en el array <b>au8FromMemory</b>.     <br>Coloca aquí un breakpoint para ver el contenido del array <b>au8FromMemory</b>, debe ser 12,13,14,15,16,17,18,19,20,21,22,23
:en__: Read 12 bytes from the address 0x00 and it stores into the array <b>au8FromMemory</b>. <br>Set here a breakpoint to see the content of the array <b>au8FromMemory</b>, it must be 12,13,14,15,16,17,18,19,20,21,22,23

:code:    
:code:    for(;;)
:code:    {
:code:    }
:code:}
[SOURCE_CODE_EX_END]

[BLOCK_END]

[SECTION_SPANISH]Descargas
[SECTION_ENGLISH]Downloads

[BLOCK_START]
[BEGIN_LIST]
[LINK_SPANISH]downloads/WS023.zip;Descarga el proyecto aquí (PSoC Creator 4.0).
[LINK_ENGLISH]downloads/WS023.zip;Download the project here (PSoC Creator 4.0).
[LINK_SPANISH]downloads/FM25CL64B.pdf;Descarga la información sobre FM25CL64B.
[LINK_ENGLISH]downloads/FM25CL64B.pdf;Download the datasheet of FM25CL64B.
[END_LIST]
[BLOCK_END]

