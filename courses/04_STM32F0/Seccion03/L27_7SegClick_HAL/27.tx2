[LESSON_FOLDER]../courses/04_STM32F0/Seccion03/L27_7SegClick_HAL/
[IMG_FOLDER]img/

[TITLE_SPANISH]Programa (HAL)
[TITLE_ENGLISH]Program (HAL)

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]En este video puedes ver funcionando el programa que he hecho usando la HAL
[ENGLISH]On the following video you can see the program, that I have written using the HAL, running
[END_LIST]

[VIDEO_SPANISH]https://www.youtube.com/embed/I9-fs8x0o_w?rel=0
[VIDEO_ENGLISH]https://www.youtube.com/embed/I9-fs8x0o_w?rel=0

[BEGIN_LIST]
[SPANISH]Vamos a ver cómo está hecho el programa
[ENGLISH]Let&#39s see how the program is
[END_LIST]
[BLOCK_END]

[SECTION_SPANISH]Pasos
[SECTION_ENGLISH]Steps

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Abre Atollic TrueStudio
[ENGLISH]Run Atollic TrueStudio
[END_LIST]
[IMG]01.png

[BEGIN_LIST]
[SPANISH]Selecciona la unidad lógica <b>k</b> para el workspace
[ENGLISH]Select the logical drive <b>k</b> for the workspace
[END_LIST]
[IMG]02.png
[IMG]03.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]El proyecto que he creado usando la HAL se llama <b>P12_Click7Seg_HAL</b>
[ENGLISH]The name of the project that I have created using the HAL is <b>P12_Click7Seg_HAL</b>
[END_LIST]
[IMG]04.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Veamos el código que he puesto en <b>main.c</b>
[ENGLISH]Let&#39s see the code I have added to <b>main.c</b>
[END_LIST]
[IMG]05.png

[SOURCE_CODE_EX_BEGIN]65
:code:  //AppGpio configuration
:code:  AppGpio_Config();
:code:
:code:  //Enable PWM
:code:  AppClick7Seg_EnablePWM();
:key1:  ----------------------
:es__: En esta lección no vamos a usar PWM sino una salida digital que vamos a poner a nivel alto para que los transistores del Click conduzcan siempre, pero más adelante en el curso volveremos aquí para usar PWM.
:en__: In this lesson we are not going to use PWM but a digital output that we will set to high level in order to have the transistors in the Click board always driving, later on the course we will come back to use PWM.

:code:
:code:  /* Infinite loop */
:code:  uint8_t u8Number = 0;
:key2:          --------
:es__: <b>u8Number</b> es una variable que vamos a incrementar continuamente de 0 a 99 y que vamos a mostrar en el Click.
:en__: <b>u8Number</b> is a variable that is going to be incremented continuously from 0 to 99 and is going to be shown in the Click.

:code:  while (1)
:code:  {
:code:      AppClick7Seg_ShowNumber(u8Number);
:key3:      -----------------------
:es__: Esta función muestra el valor de la variable <b>u8Number</b> en los displays del Click
:en__: This function shows the value of the variable <b>u8Number</b> in the Click displays

:code:
:code:      u8Number++;
:key4:      --------
:es__: Incrementa el valor de la variable <b>u8Number</b> en 1
:en__: Increments the value of the variable <b>u8Number</b> by 1

:code:      if(u8Number >99)
:key5:         --------
:es__: Si el valor de la variable <b>u8Number</b> es mayor que 99 la ponemos a 0
:en__: If the value of the variable <b>u8Number</b> is greater than 99 the variable is set to 0

:code:          u8Number = 0;
:code:
:code:      HAL_Delay(25);
:key6:      -------------
:es__: Esperamos 25 milisegundos
:en__: Wait for 25 milliseconds

:code:  }
:code:}
[SOURCE_CODE_EX_END]

[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]El código para <b>AppGpio.c</b>
[ENGLISH]The code for <b>AppGpio.c</b>
[END_LIST]
[IMG]06.png

[SOURCE_CODE_EX_BEGIN]37
:code:void AppGpio_Config(void)
:code:{
:code:    GPIO_InitTypeDef  GPIO_InitStruct;
:code:
:code:    //PWM
:code:    APP_GPIO_PWM_CLOCK();
:key1:    ---------------------
:es__: Habilita el reloj para el pin <b>Pwm</b> (ver fichero <b>AppGpio.h</b>)
:en__: Enable the clock for the pin <b>Pwm</b> (see file <b>AppGpio.h</b>)

:code:    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
:key2:                            -------------------
:es__: Configurado como salida digital
:en__: Configured as digital output

:code:    GPIO_InitStruct.Pull  = GPIO_PULLUP;
:code:    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
:code:    GPIO_InitStruct.Pin   = APP_GPIO_PWM_PIN;
:key3:                            ----------------
:es__: Constante definida en el fichero <b>AppGpio.h</b> que indica el número de pin
:en__: Constant defined in the file <b>AppGpio.h</b> that is the pin number

:code:    HAL_GPIO_Init(APP_GPIO_PWM_PORT, &GPIO_InitStruct);
:key4:                  -----------------
:es__: Constante definida en el fichero <b>AppGpio.h</b> que indica el número de puerto
:en__: Constant defined in the file <b>AppGpio.h</b> that is the port number
:key5:    -------------
:es__: Función de la librería <b>HAL</b> que configura el pin
:en__: Function from the <b>HAL</b> library that configures the pin

:code:
:code:    //LATCH
:code:    APP_GPIO_LATCH_CLOCK();
:key6:    ----------------------
:es__: Habilita el reloj para el pin <b>Latch</b> (ver fichero <b>AppGpio.h</b>)
:en__: Enable the clock for the pin <b>Latch</b> (see file <b>AppGpio.h</b>)

:code:    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
:key1:                            -------------------
:es__: Configurado como salida digital
:en__: Configured as digital output

:code:    GPIO_InitStruct.Pull  = GPIO_PULLUP;
:code:    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
:code:    GPIO_InitStruct.Pin   = APP_GPIO_LATCH_PIN;
:key2:                            -------------------
:es__: Constante definida en el fichero <b>AppGpio.h</b> que indica el número de pin
:en__: Constant defined in the file <b>AppGpio.h</b> that is the pin number

:code:    HAL_GPIO_Init(APP_GPIO_LATCH_PORT, &GPIO_InitStruct);
:key3:                  -------------------
:es__: Constante definida en el fichero <b>AppGpio.h</b> que indica el número de puerto
:en__: Constant defined in the file <b>AppGpio.h</b> that is the port number
:key4:    -------------
:es__: Función de la librería <b>HAL</b> que configura el pin
:en__: Function from the <b>HAL</b> library that configures the pin

:code:
:code:    //CLOCK
:code:    APP_GPIO_CLOCK_CLOCK();
:key5:    -----------------------
:es__: Habilita el reloj para el pin <b>Clock</b> (ver fichero <b>AppGpio.h</b>)
:en__: Enable the clock for the pin <b>Clock</b> (see file <b>AppGpio.h</b>)

:code:    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
:key6:                            -------------------
:es__: Configurado como salida digital
:en__: Configured as digital output

:code:    GPIO_InitStruct.Pull  = GPIO_PULLUP;
:code:    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
:code:    GPIO_InitStruct.Pin   = APP_GPIO_CLOCK_PIN;
:code:    HAL_GPIO_Init(APP_GPIO_CLOCK_PORT, &GPIO_InitStruct);
:key1:                  -------------------
:es__: Constante definida en el fichero <b>AppGpio.h</b> que indica el número de puerto
:en__: Constant defined in the file <b>AppGpio.h</b> that is the port number
:key2:    -------------
:es__: Función de la librería <b>HAL</b> que configura el pin
:en__: Function from the <b>HAL</b> library that configures the pin

:code:
:code:    //DATA
:code:    APP_GPIO_DATA_CLOCK();
:key3:    ---------------------
:es__: Habilita el reloj para el pin <b>Data</b> (ver fichero <b>AppGpio.h</b>)
:en__: Enable the clock for the pin <b>Data</b> (see file <b>AppGpio.h</b>)

:code:    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
:key4:                            -------------------
:es__: Configurado como salida digital
:en__: Configured as digital output

:code:    GPIO_InitStruct.Pull  = GPIO_PULLUP;
:code:    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
:code:    GPIO_InitStruct.Pin   = APP_GPIO_DATA_PIN;
:code:    HAL_GPIO_Init(APP_GPIO_DATA_PORT, &GPIO_InitStruct);
:key5:                  ------------------
:es__: Constante definida en el fichero <b>AppGpio.h</b> que indica el número de puerto
:en__: Constant defined in the file <b>AppGpio.h</b> that is the port number
:key6:    -------------
:es__: Función de la librería <b>HAL</b> que configura el pin
:en__: Function from the <b>HAL</b> library that configures the pin

:code:}
[SOURCE_CODE_EX_END]

[BEGIN_LIST]
[SPANISH]El código para <b>AppGpio.h</b>
[ENGLISH]The code for <b>AppGpio.h</b>
[END_LIST]
[IMG]06a.png

[SOURCE_CODE_EX_BEGIN]12
:code:///////////////////////////////////////////////////////////////
:code:// Pre-processor symbols/macros ('define')                             
:code:///////////////////////////////////////////////////////////////
:code:#define APP_GPIO_PWM_CLOCK         __HAL_RCC_GPIOC_CLK_ENABLE
:key1:        ------------------
:es__: Habilita el reloj del puerto C de E/S
:en__: Enable the clock of the GPIO Port C

:code:#define APP_GPIO_PWM_PORT          GPIOC
:code:#define APP_GPIO_PWM_PIN           GPIO_PIN_7
:code:
:code:#define APP_GPIO_LATCH_CLOCK       __HAL_RCC_GPIOA_CLK_ENABLE
:key2:        --------------------
:es__: Habilita el reloj del puerto A de E/S
:en__: Enable the clock of the GPIO Port A

:code:#define APP_GPIO_LATCH_PORT        GPIOA
:code:#define APP_GPIO_LATCH_PIN         GPIO_PIN_9
:code:
:code:#define APP_GPIO_CLOCK_CLOCK       __HAL_RCC_GPIOA_CLK_ENABLE
:key3:        --------------------
:es__: Habilita el reloj del puerto A de E/S
:en__: Enable the clock of the GPIO Port A

:code:#define APP_GPIO_CLOCK_PORT        GPIOA
:code:#define APP_GPIO_CLOCK_PIN         GPIO_PIN_8
:code:
:code:#define APP_GPIO_DATA_CLOCK        __HAL_RCC_GPIOA_CLK_ENABLE
:key4:        -------------------
:es__: Habilita el reloj del puerto A de E/S
:en__: Enable the clock of the GPIO Port A

:code:#define APP_GPIO_DATA_PORT         GPIOA
:code:#define APP_GPIO_DATA_PIN          GPIO_PIN_10
[SOURCE_CODE_EX_END]
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Y el código para <b>AppClick7Seg.c</b>
[ENGLISH]And the code for <b>AppClick7Seg.c</b>
[END_LIST]
[IMG]07.png
[BEGIN_LIST]
[SPANISH]Puedes ver en el siguiente dibujo qué valor hay que enviar a las salidas del HC595 para mostrar los diferentes números
[ENGLISH]You can see in the following diagram what value has to be sent to the HC595 outputs to show the different numbers
[SPANISH]Por ejemplo para el <b>0</b> hay que activar todas las salidas menos la <b>Q0</b> y la <b>Q7</b>
[ENGLISH]For example for <b>0</b> all outputs but <b>Q0</b> and <b>Q7</b> have to be activated
[SPANISH]Para el <b>1</b> hay que activar sólo las salidas <b>Q1</b> y la <b>Q3</b>
[ENGLISH]For <b>1</b> only the outputs <b>Q1</b> and <b>Q3</b> have to be activated
[END_LIST]
[IMG]0-4.png
[IMG]5-9.png

[SOURCE_CODE_EX_BEGIN]19
:code:///////////////////////////////////////////////////////////////
:code:// Local variable definitions ('static')                                     
:code:///////////////////////////////////////////////////////////////
:code:static uint8_t au8CodedDigits[] = { 0x7E,    //0
:key1:               --------------
:es__: El array <b>au8CodedDigits</b> contiene los valores que hay que enviar para mostrar los diferentes números.<br>Por ejemplo para mostrar el número 1 usaremos el valor <b>au8CodedDigits[1]</b>.
:en__: The array <b>au8CodedDigits</b> contains the values to send in order to show the different numbers.<br>For example, to show the number 1 the value to send is <b>au8CodedDigits[1]</b>.

:code:                                    0x0A,    //1
:code:                                    0xB6,    //2
:code:                                    0x9E,    //3
:code:                                    0xCA,    //4
:code:                                    0xDC,    //5
:code:                                    0xFC,    //6
:code:                                    0x0E,    //7
:code:                                    0xFE,    //8
:code:                                    0xCE};   //9
:code:
[SOURCE_CODE_EX_END]
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Más código de <b>AppClick7Seg.c</b>:
[ENGLISH]More source code from <b>AppClick7Seg.c</b>:
[END_LIST]
[IMG]08.png

[SOURCE_CODE_EX_BEGIN]45
:code://  -----------------------------------------------------------
:code://  AppClick7Seg_EnablePWM
:code://  -----------------------------------------------------------
:code:void AppClick7Seg_EnablePWM(void)
:key1:     ----------------------
:es__: Activa (1) la salida digital de PWM para activar los transistores del Click
:en__: Activate (1) the PWM digital output to activate the transistors in the Click board

:code:{
:code:    HAL_GPIO_WritePin(APP_GPIO_PWM_PORT,
:code:                      APP_GPIO_PWM_PIN,
:code:                      GPIO_PIN_SET);
:code:}
:code:
:code://  -----------------------------------------------------------
:code://  GenerateLatch
:code://  -----------------------------------------------------------
:code:void GenerateLatch(void)
:key2:     -------------
:es__: Genera un pulso positivo en la señal de Latch.
:en__: Generate a positive pulse on the Latch signal

:code:{
:code:    HAL_GPIO_WritePin(  APP_GPIO_LATCH_PORT,
:code:                        APP_GPIO_LATCH_PIN,
:code:                        GPIO_PIN_SET);
:key3:                        ------------
:es__: Pone el pin de Latch a 1
:en__: Set the Latch pin to 1

:code:    HAL_GPIO_WritePin(  APP_GPIO_LATCH_PORT,
:code:                        APP_GPIO_LATCH_PIN,
:code:                        GPIO_PIN_RESET);
:key4:                        --------------
:es__: Pone el pin de Latch a 0
:en__: Set the Latch pin to 0

:code:}
:code:
:code://  -----------------------------------------------------------
:code://  Generate01
:code://  -----------------------------------------------------------
:code:void Generate01(GPIO_PinState _pinState)
:key5:                              ---------
:es__: Valor a sacar en el pin de datos
:en__: Value to output on the data pin

:key6:     ----------
:es__: Saca un 1 o un 0 en el pin de datos y luego genera un pulso positivo en el pin de Clock.
:en__: Puts a 1 or a 0 on the data pin and afterwords generates a positive pulse on the Clock pin.

:code:{
:code:    HAL_GPIO_WritePin(  APP_GPIO_DATA_PORT,
:code:                        APP_GPIO_DATA_PIN,
:code:                        _pinState);
:key1:                        ---------
:es__: Escribe en el pin de datos
:en__: Write to the data pin

:code:    HAL_GPIO_WritePin(  APP_GPIO_CLOCK_PORT,
:code:                        APP_GPIO_CLOCK_PIN,
:code:                        GPIO_PIN_SET);
:key2:                        ------------
:es__: Escribe un 1 en el pin de reloj (Clock)
:en__: Write a 1 to the Clock pin

:code:    HAL_GPIO_WritePin(  APP_GPIO_CLOCK_PORT,
:code:                        APP_GPIO_CLOCK_PIN,
:code:                        GPIO_PIN_RESET);
:key3:                        --------------
:es__: Escribe un 0 en el pin de reloj (Clock)
:en__: Write a 0 to the Clock pin

:code:}
[SOURCE_CODE_EX_END]
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Más código de <b>AppClick7Seg.c</b>:
[ENGLISH]More source code from <b>AppClick7Seg.c</b>:
[END_LIST]
[IMG]09.png

[SOURCE_CODE_EX_BEGIN]115
:code:void AppClick7Seg_ShowNumber(uint8_t _u8Number)
:key1:     -----------------------
:es__: Muestra el número <b>_u8Number</b> en los displays de 7 segmentos del Click, para la explicación supongamos que <b>_u8Number</b> es 27.
:en__: Show the number <b>_u8Number</b> on the 7-segment displays of the Click, for this explanation let&#39s assume that <b>_u8Number</b> is 27.

:code:{
:code:    ShowDigit(_u8Number % 10);
:key2:    ---------
:es__: Ver la explicación de esta función en el siguiente listado
:en__: See the explanation of this function on the next listing

:key3:              --------------
:es__: El módulo base 10 de 27 es 7, así obtenemos las unidades
:en__: In order to get the ones of the number, the modulo operator is used, this way we get the number 7

:code:    ShowDigit(_u8Number / 10);
:key4:    ---------
:es__: Ver la explicación de esta función en el siguiente listado
:en__: See the explanation of this function on the next listing

:key5:              --------------
:es__: La división entera de 27 entre 10 nos da las decenas (2)
:en__: The integer division of 27 by 10 produces the tens (2)

:code:    GenerateLatch();
:key6:    -------------
:es__: Generamos el latch para actualizar las salidas de los dos HC595
:en__: Generate the latch to update the outputs of the 2 HC595

:code:}
[SOURCE_CODE_EX_END]

[SOURCE_CODE_EX_BEGIN]106
:code:void ShowDigit(uint8_t _u8Digit)
:key1:     ---------
:es__: Esta función obtiene el byte para cargar en el HC595 correspondiente al número a mostrar en el display y llama a la función <b>GenerateCode</b>
:en__: This function gets the byte (to load to the HC595) corresponding to the number to show on the display and call the function <b>GenerateCode</b>

:code:{
:code:    uint8_t    u8Code    =    au8CodedDigits[_u8Digit];
:key2:               ------
:es__: Si el digito a mostrar (<b>_u8Digit</b>) es 7 el valor a cargar <b>u8Code</b> en el HC595 es 0x0E. Si <b>_u8Digit</b> es 2 <b>u8Code</b> será 0xB6
:en__: If the digit to show (<b>_u8Digit</b>) is 7 the value to load <b>u8Code</b> to the HC595 is 0x0E. If <b>_u8Digit</b> is 2 <b>u8Code</b> will be 0xB6

:code:    GenerateCode(u8Code);
:key3:    ------------
:es__: Ver la explicación de esta función en el siguiente listado
:en__: See the explanation of this function on the next listing

:code:}
[SOURCE_CODE_EX_END]

[SOURCE_CODE_EX_BEGIN]87
:code:void GenerateCode(uint8_t _u8Code)
:key1:     ------------
:es__: Esta función tiene un bucle con el que recorre los 8 bits del valor <b>_u8Code</b> a cargar en el HC595 y llama a la función <b>Generate01</b> para sacarlo por el pin de datos y generar un pulso en la señal de reloj
:en__: This function has a loop that walks through the 8 bits of the value <b>_u8Code</b> to load to the HC595 and calls the function <b>Generate01</b> to output it on the data pin and to generate a pulse on the clock pin

:code:{
:code:    uint8_t    u8Mask   =    0x80;
:key2:               ------
:es__: Máscara con un valor inicial de 0x80 que sirve para recorrer los bits de <b>_u8Code</b>. En el bucle esta variable valdrá <br>0x80 (1000 0000)<br>0x40 (0100 0000)<br>0x20 (0010 0000)<br>...<br>0x02 (0000 0010)<br>0x01 (0000 0001)
:en__: Mask with an initial value of 0x80 that is for walking throught the bits of <b>_u8Code</b>. In the loop this variable will be <br>0x80 (1000 0000)<br>0x40 (0100 0000)<br>0x20 (0010 0000)<br>...<br>0x02 (0000 0010)<br>0x01 (0000 0001) 

:code:    uint8_t    u8Idx    =    0;
:code:    for(u8Idx=0; u8Idx<8; u8Idx++)
:key3:                       -
:es__: El bucle se ejecuta 8 vez, una vez por bit
:en__: The loop will run 8 times, once per bit

:code:    {
:code:        GPIO_PinState _pinState   =    GPIO_PIN_RESET;
:code:        if( _u8Code & u8Mask )
:code:        {
:code:            _pinState             =    GPIO_PIN_SET;
:code:        }
:code:        Generate01(_pinState);
:key4:        ---------------------
:es__: Si el bit es 1 generamos en el pin de datos un nivel alto y un pulso en la señal de reloj. Si es 0 un nivel bajo y un pulso en la señal de reloj
:en__: If the bit is 1 a high level on the data pin and a pulse on the clock signal are generated. If it is a 0 a low level on the data pin and a pulse on the clock signal are generated

:code:        u8Mask        >>=    1;
:key5:        ----------------------
:es__: Desplazamos la máscara un bit a la derecha para acceder al siguiente bit de <b>_u8Code</b>
:en__: Shift the mask, one bit to the right, to access the next bit of <b>_u8Code</b>
:code:    }
:code:}
[SOURCE_CODE_EX_END]

[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Compila el proyecto
[ENGLISH]Build the project
[END_LIST]
[IMG]10.png
[IMG]11.png
[IMG]12.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Depura el programa para ver los displays mostrando los números
[ENGLISH]Debug the program to see the displays showing the numbers
[END_LIST]
[IMG]13.png
[IMG]14.png
[IMG]15.png
[BLOCK_END]

