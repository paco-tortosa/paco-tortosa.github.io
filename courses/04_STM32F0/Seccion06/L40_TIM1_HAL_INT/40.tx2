[LESSON_FOLDER]../courses/04_STM32F0/Seccion06/L40_TIM1_HAL_INT/
[IMG_FOLDER]img/

[TITLE_SPANISH]Señal cuadrada (HAL-INT)
[TITLE_ENGLISH]Square signal (HAL-INT)

[MPPRO_SECTION_ES_EN]IDE|IDE
[MPPRO_VIDEO]03_Camtasia\01_cam_IDE.mp4|0

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]En esta lección vamos a utilizar interrupciones para hacer parpadear el led en vez de un bucle como en la lección anterior.
[ENGLISH]In this lesson we are going to use interrupts to blink the led instead of using a loop as in the previous lesson.
[SPANISH]Cada vez que el registro <b>CNT</b> del <b>TIM1</b> llegue a 0 se generará una interrupción, y en la rutina de atención a la interrupción conmutaremos el led.
[ENGLISH]Every time that the register <b>CNT</b> of <b>TIM1</b> reaches 0 an interrupt will be generated, and in the Interrupt Service Routine we will toggle the led.
[END_LIST]
[BLOCK_END]

[TITLE_SPANISH]Pasos
[TITLE_ENGLISH]Steps

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Crea un proyecto nuevo basado en el kit de evaluación y dale el nombre <b>P20_TIM1_HAL_INT</b>.
[ENGLISH]Create a new project based on the evaluation kit and give it the name <b>P20_TIM1_HAL_INT</b>.
[END_LIST]
[IMG]01.png
[IMG]02.png
[IMG]03.png
[IMG]04.png
[IMG]05.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Vamos a configurar el <b>TIM1</b> como en la lección anterior.
[ENGLISH]Let&#39s configure the <b>TIM1</b> as in the previous lesson.
[END_LIST]
[IMG]06.png
[IMG]07.png
[IMG]08.png
[IMG]09.png
[IMG]10.png
[IMG]11.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Ahora vamos a habilitar la interrupción cuando se genera el flag <b>UIF</b>.
[ENGLISH]Now let&#39s enable the interrupt generated by the flag <b>UIF</b>.
[END_LIST]
[IMG]12.png
[IMG]13.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Vamos a generar el código de configuración.
[ENGLISH]Generate the configuration source code.
[END_LIST]
[IMG]14.png
[IMG]15.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Vamos a añadir nuestro código en el fichero <b>main.c</b>
[ENGLISH]Let&#39s add our source code in the file <b>main.c</b>
[END_LIST]
[IMG]16.png
[IMG]17.png
[IMG]18.png
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Primero vamos a inicializar el temporizador, vamos a usar la función <b>HAL_TIM_Base_Start_IT</b> que además de inicializar el timer habilita la interrupción.
[ENGLISH]First we are to initialize the timer by using the function <b>HAL_TIM_Base_Start_IT</b> that is going to initialize the timer and enable the interrupt of the timer.
[END_LIST]
[IMG]19.png

[SOURCE_CODE_EX_BEGIN]103
:code:  /* Infinite loop */
:code:  /* USER CODE BEGIN WHILE */
:code:  HAL_TIM_Base_Start_IT( &htim1 );
:key1:  ---------------------
:es__:Inicializamos el <b>TIM1</b> a la vez que habilitamos la interrupción.
:en__:Initialize the <b>TIM1</b> and enable the interrupt.

:code:  while (1)
:code:  {
:code:    /* USER CODE END WHILE */
:code:
:code:    /* USER CODE BEGIN 3 */
:code:  }
[SOURCE_CODE_EX_END]
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Ahora añadimos la rutina de atención a la interrupción.
[ENGLISH]Now add the ISR (Interrupt Service Routine).
[END_LIST]
[IMG]20.png
[IMG]21.png

[SOURCE_CODE_EX_BEGIN]61
:code:/* Private user code -----------------*/
:code:/* USER CODE BEGIN 0 */
:code:void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
:key4:     -----------------------------
:es__:Esta es la función callback que la HAL llama cuando hay una interrupción del timer.
:en__:This is the callback function that the HAL calls in case of a timer interrupt.

:code:{
:code:    //Toggle LED
:code:    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
:key5:    ------------------
:es__:Conmutamos el pin <b>PA5</b>.
:en__:Toggle the pin <b>PA5</b>.

:code:}
:key6:-
:es__:No hace falta limpiar el flag <b>UIF</b>, la HAL lo hace por nosotros.
:en__:You do not need to clean the flag <b>UIF</b>, the HAL makes it for us.

:code:/* USER CODE END 0 */
:code:
[SOURCE_CODE_EX_END]
[BLOCK_END]

[BLOCK_START]
[BEGIN_LIST]
[SPANISH]Ya puedes compilar y depurar el programa.
[ENGLISH]You can build and debug the program.
[END_LIST]
[IMG]22.png
[IMG]23.png
[IMG]24.png
[IMG]25.png
[BLOCK_END]

